<!DOCTYPE html>
<HTML>
<HEAD>
    <TITLE>Essay</TITLE>
    <META http-equiv="Content-Type" content="text/html; charset=gb2312">
	<META name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scale=0"> 


    <link rel="stylesheet" type="text/css" href="./css/Default_pad.css">

    <script language="javascript" src="./jq/jquery.js"></script>
	
	<script language="javascript" src="./jq/MyCookies.js"></script>
	



	
	
 
    <script language="javascript" src="BiblePadUtils-2015.js"  type="text/javascript">
    </script>
<style>
body {
    background-color: black;
    color: white;

	font-size: 100%;
	
    padding:0px 0px 0px 0px;
    margin: 0px 0px 0px 0px;		
}



input{
    font-size:60px;
    height:92px;

   
  	position:relative;
	top:60px; 
   }
#MenuContainer{
   position:fixed;
   top:5px;
   right:5px;

}

#edit_op, #voiceinputxx{
   float:right;
   font-size:30px;
   
   	padding:0 0 0 0px;
	margin: 0px 2px 0px 2px;
	z-index:100;
}
.voiceCmd{
 float:right;
 font-size:60px;
 margin: 0px 1px 0px 1px;
 padding:0px 10px 0 10px;
 background-color:#cccccc;
}
#edit_op{
   align: right;
   right:0px;
   width:200px;
}


#viceInputContainer{
 position:fixed;
 bottom:10px; 
 left:1px;
 
 width:100%;
 height:200px;
 padding: 0px 0px 0px 0px;
 margin:0px 0px 0px 0px;
}
#voiceinput{
 float:right;
 width:100%;
 height:100%;
 background-color:yellow;
 color:black;
 font-size:30px;

}
#watchDog{
 background-color:#cccccc;
 
}
#VoiceInputCmdMode{
 background-color:#cccccc;
 float:right;
}
.voicePiece{
  display:block;
  border: 1px solid #bbbbbb;
 padding: 2px 0px 5px 0px;
}
.vpiece{
  border: 1px solid #0000ff;
}
.popouter{
 background-color:#cccccc;
 border: 1px solid #0000ff;
 padding: 1px 10px 5px 10px;
}


#div_edit{
	background-color:#123000;
   border: 2px solid #0000f0;
   padding: 0px 0px 0px 0px;
   margin:  0px 0px 0px 0px;

	word-wrap:yes;
	white-space: wrap;
   word-wrap: break-word;
   width:100%;
   left:0px;
}
#div_edit_Code{
	position:relative;
	top:360px;
	height:300px;
}

#tbContainer{
	width:100%;
}
td, th{
   padding: 0px 0px 0px 0px;
   margin:  0px 0px 0px 0px;

}




.idx{
 border: 1px solid #ffff00;
}
.fname{
  background-color:grey;
}
.txt{

}
.idx_tmp{
  background-color:grey;
}

#cright{
	}
</style>    
    
    <script language="javascript">
    if (navigator.cookieEnabled){
	   console.log("document.cookie:"+document.cookie);
    }else{
	   alert("cookieEnabled OFF");
	}
	var fname=getWindowLocationHrefParmsValue("fname");
	

function getWindowLocationHrefParmsValue(skey){
	var curUrl=""+window.location.href;
	//alert(curUrl);
	var pattern="[?&]"+skey+"=([^&]*)"; 
	var reg = new RegExp(pattern, "g")
	var matchesArr=curUrl.match( reg );
	if(matchesArr && matchesArr.length>0){
		var strArr=matchesArr[0].split("=");
		return strArr[1];
	}
	return "";
}
	
function read_fname(_this){
	var fname=$(_this).attr("fname");
    read_diary(fname);
}
	
function readAll(path){
	console.log("readAll");
	$.ajax({
                  url: "../svc/BoP/MyNotes/readall.svc.php", 
                  data: "path="+path,
                  type: 'post',
                  success: function(ret) {
					$("#msg").html("<hr/>+ + +<hr/>"+ret);	
					if( ret.indexOf("Invalid") >=0 ) {
					    alert("err:"+ret);
						open_login_page();
					}
					else{
						_click_run_idx_all();
					}
                  },
                  complete:function(ret,err){
					if(err !=="success"){
						alert(err);
					}
                  }
        });
}

function save_edit(){
	var txt = EditableDiv.get_edit_txt();
	var txtlen = txt.length;
	if(!EditableDiv.hasModified()){
		if(!confirm(txtlen+"(B)\n\nNo changes is found\n\nForce to save?!")){
		    return;
		}
	}
	else if(!confirm(txtlen+"(B)\n\nSave?!" )){
		return;
	}
	save_edit_start(txt);
}

function save_edit_start(txt){	
	txt=encodeURIComponent(txt);
	var fname=MyCookies.Get("fname");
	if(""===fname){return alert("no fname");}
	console.log("fname="+fname);
	$.ajax({
                  url: "../svc/BoP/MyNotes/save.svc.php", 
                  data: "txt="+txt+"&file="+fname,
                  type: 'post',
                  success: function(ret) {
					$("#msg").prepend("<hr/>+ + +<hr/>"+ret);						
					if( ret.indexOf("Invalid") >=0 ) {
					    alert("err:"+ret);
						open_login_page();
					}
					EditableDiv.saveOK();
					text_statistic();
                  },
                  complete:function(ret,err){
                  }
        });
}
function open_login_page(){
  window.open("./login.htm?do=CloseOnSuccessLogin", "_blank");
}


function read_diary_fr_txt(fname){
	read_diary(fname);

}
function read_diary(fname){
	MyCookies.Set("fname", fname);
	$("#edit_op option[value='fname']").text(fname);

	$.ajax({
                  url: "../svc/BoP/MyNotes/read.svc.php", 
                  data: "fname="+fname,
                  type: 'post',
                  success: function(ret) {
                    //alert(ret);
					if(ret.indexOf("Invalid")>=0){
						alert("Sorry, need login first.");
						//window.history.back();						
						open_login_page();
						self.close();
						window.close();
						return;
					}
					EditableDiv.set_edit_txt(ret).saveOK();
					text_statistic();
					//document.getElementById("div_edit").scrollIntoView();
                  },
                  complete:function(ret,err){
                  }
    });
}

function Font_Size_Prompt(){
    var fnt=MyCookies.Get("fontsize");
    fnt=prompt("*Font "+parseInt(fnt)+"px", "");
    fnt=parseInt(fnt)
    if(fnt<7 || fnt>220){
        return alert("out of range(7,220)");
    }
	MyCookies.Set("fontsize",fnt);
	
	Font_Size_Refresh();
};	
function Font_Size_Refresh(){
    var fnt=MyCookies.Get("fontsize");
	var fontsize = fnt + "px";
	$("#edit_op option[value='FontSize']").text("FontSize:"+fontsize);
	$("#div_edi").css("font-size",fontsize);
	$(".voicePiece").css("font-size",fontsize);
	$(".popouter").css("font-size",fontsize);
}


function File_Cmds(cmd){
	var div_edit="#div_edit";
	if("ViewCode"!=cmd){
		ViewCodeModeReset();
	}
	switch(cmd){
		case "News": ReadNew({dlg:true});
		break;
		case "save": save_edit();
		break;
		case "ReadAll_Dairy": 
		case "ReadAll_Vnote": 
			readAll(cmd);
		break;
		case "Toggle_AllRead":
			_click_run_idx_all();
		break;
		case "ToggleVoiceInput":
			$("#viceInputContainer").slideToggle();
		break;
		case "FontSize": Font_Size_Prompt();
		break;
		case "clear":
		if(confirm("Clear edit text?!")){
			$(div_edit).empty();
		}
		break;	
		case "cleanGarbage":
			$("#voiceCollector").empty();
		break;
		case "ul_list":
		   var ht=$(div_edit).html();
		   ht+="<ul><li>aaa</li><li>bbb</li></ul><br/>";
		   $(div_edit).html(ht);
		break;
		case "ol_list":
		   var ht=$(div_edit).html();
		   ht+="<ol><li>aaa</li><li>bbb</li></ol><br/>";
		   $(div_edit).html(ht);
		break;
		case "ViewCode":
			ViewCodeToggle();			   
		break;
		case "ClonePopup":
			var url=""+window.location.href;
			window.open(url,"_blank");			   
		break;
		case "ViewText":
		   var ht=$(div_edit).text();
		   $(div_edit).html(ht);
		break;
		case "htm_BR":
		   var ht=$(div_edit).html();
		   ht+="<br/>";
		   $(div_edit).html(ht);
		break;
		case "htm_HR":
		   var ht=$(div_edit).html();
		   ht+="<hr/><br/>";
		   $(div_edit).html(ht);
		break;
		case "htm_test":
				test();
		break;
	}	
}	
function ViewCodeToggle(){
	var mode = $("#div_edit").attr("ViewCodeMode");
	if(mode==="code"){
	  var ht=$("#div_edit").text();
	  $("#div_edit").html(ht).attr("ViewCodeMode","").css("background-color","");
	}else{
	  var ht=$("#div_edit").html();
	  $("#div_edit").text(ht).attr("ViewCodeMode","code").css("background-color","#666600");
	}
}
function ViewCodeModeReset(){
	var mode = $("#div_edit").attr("ViewCodeMode");
	if(mode==="code"){
	  ViewCodeToggle();
	}
}
function ReadNew(jsn){
	var todayDate=new Date();
	var strDate=todayDate.toJSON().substr(0,10);
	console.log("ReadNews:"+strDate);
	
	if(jsn.dlg){
		strDate=prompt("Today: "+strDate, strDate);
		if(!strDate) return;
	}

	read_diary(strDate);
}

function test(){
            var EssayFileName=MyCookies.Get("fname");
            var email=MyCookies.Get("email");
            alert(email+","+EssayFileName);
            if("MyEssayIsEmpty"===EssayFileName){
                return alert("MyEssayIsEmpty");
            }
            if(email.length==0){
                return;
            }
            var poplink="../usrdata/BoP/"+email+"/diary/"+EssayFileName;
            poplink=" <a target='_blank' href='"+poplink+"'>"+EssayFileName+"</a> ";
            var ht=$(div_edit).html();
            ht+=poplink;
            $(div_edit).html(ht).attr("contenteditable",false);
};	

	
$(document).ready(function(){

	
    $("#div_edit2").mousemove(function(){
		console.log("mousemove");
		//pressChar("div_edit2",'A');
		//test();
	});
	

	

	$("#edit_op").change(function(){
		var sel=$(this).val();
		var editfname=MyCookies.Get("fname");
		$(this).find("option[value='fname']").text(editfname);
		$(this).val("fname");
		File_Cmds(sel);
    });
	

	var fname=getWindowLocationHrefParmsValue("fname");
	MyCookies.Init({fname:fname,fontsize:30});
	if(""===fname){
		MyCookies.ExpireDays(77);
	}
	else{
		MyCookies.ExpireDays(0);		
	}
		
	fname=MyCookies.Get("fname");
	
	if(""===fname){
		ReadNew({dlg:false});
	}
	else{
		read_diary(fname);
	}
	Font_Size_Refresh();
	$("#viceInputContainer").hide();
	
	$("#helpnotes").hide();
	
	
	$("#div_edit").focus(function(){
		$("#div_edit").css("background-color","#007700");
	}).blur(function(){
		$("#div_edit").css("background-color","");
	});
	
	$("#voiceinput").keyup(function(){
		voiceInputRunWatchdog=voiceInputRunDelay;
		if(!voiceInputRunWatchdog_setInterval){
			voiceInputRunWatchdog_setInterval=setInterval(voiceInputRun, 500);
		}
	}).change(function(){
		//voiceInputRunWatchdog=voiceInputRunDelay;
	}).focus(function(){
		//$(this).css("width","100%");
		$(this).css("background-color","yellow");
		//document.getElementById("watchDog").scrollIntoView();
	}).blur(function(){
		$(this).css("background-color","#777700");
		voiceInputStop();
	});
	
	$(".voiceCmd").click(function(){
		var cmd=$(this).text();
		EditableDiv.add_edit_txt(cmd);
		$("#voiceinput").blur();
		//$("#div_edit").focus();
		var ta = document.getElementById('div_edit');
		//ta.scrollTop = ta.scrollHeight;
		document.getElementById('div_edit_bottom').scrollIntoView();
	});
	
	$("#watchDog").click(function(){
		$("#voiceinput").focus();
		voiceInputRunDelay++;
	});
	
	$("#VoiceInputCmdMode").click(function(){
		$("#voiceinput").focus();
		voiceInputRunWatchdog++;
	});
	



	$(".idx").bind("click", function(){
		$(this).parent().find(".txt").slideToggle();
	});
});
function _clic(_this){
	var cls=$(_this).attr("class");
	_clic_run(_this, cls);
}
function _clic_run(_this,cls){
	switch(cls){
	case "txt":
		break;
	case "idx":
		_clic_run_idx(_this);
		break;
	case "itm":
		break;
	}
}
function _clic_run_idx(_this){
	//$(_this).toggleClass("idx_tmp");
	$(_this).next().next().toggle();
	if($(_this).parent().find(".tmp").length==0){
	    var txt=$(_this).next().next().text();//toggleClass("brv");
		txt=txt.substr(0,50);
		var app="<a class='tmp'> "+txt+"...</a>";
		$(_this).parent().append(app);
		$(_this).parent().find(".tmp").show();
		console.log(txt);
	}
	else{
		$(_this).parent().find(".tmp").toggle();
	}
}
function _click_run_idx_all(){
	$(".idx").each(function(){
		_clic_run_idx($(this));
	});
}

var voiceInputRunWatchdog=9;
var voiceInputRunDelay=3;
var voiceInputRunWatchdog_setInterval=null;
function voiceInputRun(){
	$("#watchDog").text(voiceInputRunWatchdog);
	if(voiceInputRunWatchdog>0){
		voiceInputRunWatchdog--;
		return;
	}
   
	VoiceParser.voiceInputParser();
	voiceInputStop();
}
function voiceInputStop(){
	if(voiceInputRunWatchdog_setInterval){
		clearInterval(voiceInputRunWatchdog_setInterval);
		voiceInputRunWatchdog_setInterval=null;
		$("#watchDog").text("+");
	}
}







var EditableDiv={
get_edit_txt: function (){	
	var txt=$("#div_edit").html();
	var mode=$("#div_edit").attr("ViewCodeMode");
	if(mode==="code"){
		txt=$("#div_edit").text();
	}
	return txt;
},
set_edit_txt: function (txt){	
	var mode=$("#div_edit").attr("ViewCodeMode");
	if(mode==="code"){
		$("#div_edit").text(txt);
	}
	else{
		$("#div_edit").html(txt);
	};
	return this;
},

add_edit_txt: function (str){	
	var txt=this.get_edit_txt();
	if(",.-\:".indexOf(str.trim())>=0) {
		txt=txt.trim();
	}
	this.set_edit_txt(txt+str);
	return this;
},
hasModified: function (str){	
	var txt  =this.get_edit_txt();
	var txt2 =$("#div_edit").attr("oldtxt");
	if(txt===txt2){
		return false;
	}
	return true;
},
saveOK: function (str){	
	var txt=this.get_edit_txt();
	$("#div_edit").attr("oldtxt",txt);
	return this;
},
};




/////////////////////////////////
////+++////
var VoiceParser={
  voiceMode:"edi",//default or 'cmd'

  toggle:function(){
	if('edi'===this.voiceMode){
		this.voiceMode="cmd";
		$("#voiceinput").css("background-color","#ff0000");
	}else{
		this.voiceMode="edi";
		$("#voiceinput").css("background-color","yellow");
	}
	console.log(this.voiceMode);
  },
  parseVoice:function(txt){
	if(this.voiceMode==="cmd"){
		this.parseVoiceCmd(txt);
	}
	else{
		this.parseVoiceEdi(txt);
	}
  },
 
  voiceInput_save_the_file_0:function(){
		var txt = EditableDiv.get_edit_txt();
		var ss="";
		if(!EditableDiv.hasModified()){
			ss += txt.length+"(B)<br/>No changes is found\n\nForce to Save(yes|no)?! ";		    
		}
		else{
			ss +=txt.length+"(B)<br/>Save(yes|no)?! " ;
		}
		this.appendout(ss,"yes|no");
    },
	voiceInput_save_the_file_1:function(){
			var txt = EditableDiv.get_edit_txt();
			save_edit_start(txt);
	},
	UTI:{
			ads:function(s){
				s=s.trim();
				if(s.length==0) return "";				
				return "<a class='vpiece' onclick='VoiceParser.addin(this)'>"+s+" </a>";
			},
			adm:function(txt){
				var arr=txt.split(' ');
				var ret="",i=0;	
				if(arr.length>1){
					ret += "<a class='popouter' onclick='VoiceParser.toggleMoveTo(this)'>[+]</a>";
					ret += "<a class='popouter' onclick='VoiceParser.addAll(this)'>[*]</a>";
				}

				
				for(i=0;i<arr.length;i++){
					ret += this.ads( arr[i] );
				}
				return ret;
			},
	},
	appendout:function(txt, mode){
		var vp=this.UTI.adm(txt);
		if(mode.length==0) {
			mode="[X]";
		}
		else if("yes|no"===mode){
			vp="";
		    mode=txt;
		}
		var vx="<a onclick='VoiceParser.popout(this)' class='popouter'>"+ mode +"</a>";

		var newOption = $("<div class='voicePiece'>"+vx+vp+"</div>");
		
		$("#voiceCollector").append(newOption);	
		
		
		document.getElementById("watchDog").scrollIntoView();
	},

  parseVoiceCmd:function(txt){
	if( txt.match(this.getRegExp("space$")) ){
	}

	if( txt.match(this.getRegExp("go back$") ) ){
	}
	if( txt.match(/go back$/) ){
	}
	
	if( txt.match(this.getRegExp("backspace$")) ) {
	}	
	else if( txt.match(/backspace$/g) ) {
	}
	if(txt.match(/[N|n]o/)){
		this.appendout("No action!","yes|no");
		this.toggle();
	}
	if(txt.match(/[Y|y]es/)){
		switch(this.cmd){
			case "SAVE_FILE":
			this.voiceInput_save_the_file_1();
			break;
		}
	
		this.toggle();
	}

	
	//save_edit();
    document.getElementById("watchDog").scrollIntoView();
	console.log(txt);  
  },
  parseVoiceEdi:function(txt){
	if( txt.match(/voice command/)){
		//this.toggle();
		//return;
	}
	if( txt.match(/[C|c]lea[r|n]$/g) ){
		this.appendout(txt,"yes|no");	
		return;
	}
	if( txt.match(/(display|show) help$/g) ){
		this.appendout(txt,"yes|no");
		$("#helpnotes").show();
		return;
	}
	if( txt.match(/(hide|remove) help$/g) ){
		this.appendout(txt,"yes|no");
		$("#helpnotes").hide();
		return;
	}
	if( txt.match(/[C|c]lea[r|n] garbage$/g) ){
		this.appendout(txt,"yes|no");
		$("#voiceCollector").empty();
		return;
	}
	if( txt.match(this.getRegExp("horizontal bar")) ){
		this.appendout(txt,"yes|no");
		var txt2=$("#div_edit").html();
		$("#div_edit").html(txt2+"<hr/><br/>");
		return;
	}
	if( txt.match(this.getRegExp("horizontal break$")) ){
		this.appendout(txt,"yes|no");
		var txt2=$("#div_edit").html();
		$("#div_edit").html(txt2+"<br/>");		
		return;
	}
	
	if( txt.match(/save (a|the|this|to) (file)/ ) || txt.match(/save/) ){
		this.appendout(txt,"yes|no");
		this.voiceInput_save_the_file_0();
		this.cmd="SAVE_FILE";
		this.toggle();
		return;
	}	

	this.appendout(txt,"");	
	return;	  
  },
  voiceInput_set:function(txt){
  	$("#voiceinput").val(txt);
	//scroll2bottom
	var ta = document.getElementById('voiceinput');
	ta.scrollTop = ta.scrollHeight;
  },
  voiceInputParser: function(){
	var txt=$("#voiceinput").val();
	this.parseVoice(txt);
	this.voiceInput_set("");
	return;
  },
  
getRegExp:function (str){
	var inpstr="";
	var regstr=inpstr+str;
	var reg = new RegExp(regstr, "g")  //"/" + str + "/g";
	return reg;
},
toggleMoveTo:function (me){
    var bdr=$(me).css("border");
    console.log(bdr);
    var mv2=$(me).parent().attr("MoveTo");
    if( "garbage" != mv2 ){
		$(me).parent().attr("MoveTo","garbage");
		$(me).css("background-color","#ff0000");
		$(me).text("[-]");
    }
    else if( "garbage"===mv2 ){
		$(me).parent().attr("MoveTo","");
		$(me).css("background-color","#cccccc");
		$(me).text("[+]");
    }
    $("#voiceinput").focus();
},
addAll:function (me){
	var txt = $(me).parent().text();
	var idx=txt.indexOf("[");
	txt=txt.substr(9);
	console.log("--"+txt);
	EditableDiv.add_edit_txt(" "+txt);
	$("#voiceinput").blur();
	$("#voiceinput").focus();
	$(me).parent().remove();
},
addin:function (me){
    var mv2=$(me).parent().attr("MoveTo");
    if(mv2!="garbage"){
		var txt = $(me).text();
		txt=" "+txt.trim();
		console.log("+++"+txt);
		
		EditableDiv.add_edit_txt(txt);
		$("#voiceinput").blur();
		//$("#div_edit").focus();
	}
	var pa=$(me).parent();
	$(me).remove();
	var txt=$(pa).text().trim();
	var idx=txt.indexOf("[");
	if(idx==0){
		//$(pa).remove();
	}
},
popout:function (me){
 console.log("--");
 $(me).parent().remove();
 $("#voiceinput").focus();
},

};
////+++///
/////////////////////


	

	
function text_statistic(){
	var txt=$("#div_edit").text();
	var arr=txt.split(" ");
	
	var fname=MyCookies.Get("fname");
	var ss=""+fname+"<br/> total words:"+arr.length+", size(B):"+txt.length;
    
    //add most recent at front.
	$("#datetimeinfo").html(ss); 
}
    </script>

</HEAD>
    <BODY xxxonload="body_onload();">
    <div id="MenuContainer">
		  <select id='edit_op' editfname='File...'>
				<option value="fname">...</option>
				<option value="News">New</option>				
                <option value="save">Save</option>
				<option value="ViewCode">ViewCodeToggle</option>
				<option value="ClonePopup">ClonePopup</option>	
				<option value="htm_HR">_______</option>
				<option value="htm_BR">break(br)</option>
				<option value="ol_list">ol list</option>
				<option value="ul_list">ul list</option>
				<option value="ReadAll_Dairy">ReadAll_Dairy</option>
				<option value="ReadAll_Vnote">ReadAll_Vnote</option>
				<option value="Toggle_AllRead">Toggle_AllRead</option>
				<option value="ToggleVoiceInput">Toggle_VoiceInput</option>

				<option value="FontSize">FontSize:40</option>
                <option value="clear">clearData</option>
				<option value="cleanGarbage">cleanGarbage</option>
				<option value="htm_test">test</option>
		  </select>

	</div>
	
<style>
#datetimeinfo{
 left:0px;
 height:40px;
}

a.txt{
 width:30%;
 height:20px;
}
</style>

<a id='datetimeinfo'>...</a> 

		<div id='div_edit' contenteditable='true'>
        </div>

<table id='tbContainer' border='0'>
<tr><td>
		  
		


</td></tr><tr><td>
<a id='div_edit_bottom'>...<a>



</td></tr><tr><td>
<div id='helpnotes'>
<ul >
<li>"Comma"ˈ/kämə/ [Inserts a comma.]
</li><li>"Period" /pirēəd/[Inserts a period followed by a space.]
</li><li>"Point" [Inserts a period when used within appropriate context, such as "Android two point two."]
</li><li>"Exclamation point" or "exclamation mark" [Inserts an exclamation point.]
</li><li>"Question mark" [Inserts a question mark.]
</li><li>"Colon" /ˈkōlən/[Inserts a colon.]
</li><li>"Smiley face" [Inserts a :-) smiley face.]
</li><li>"Sad face" [Inserts a :-( frowny face.]
</li><li>"Wink wink" /wiNGk/ [Inserts a ;-) winky face.]
 
 </li><li>"clean Garbage" 
 </li><li>"horizontal break" 
 </li><li>"horizontal bar" 
 </li><li>"backspace" 
 
 </li>
 </ul>
 </div>
</td></tr><tr><td id="voiceCollector">
 
</td></tr><tr><td>
  

</td></tr></table>




<div id="viceInputContainer">
 <a id="watchDog">+</a> 
<textarea id="voiceinput"  class=""></textarea>
</div>
<hr/><p/><p/><p/><p/><p/><p/><p/>
	    <p id='info'>...</p>		
		<p id='cright'>@</p>	
		<p id='msg'>......</p>
<hr/>		
    </BODY>


</HTML>
